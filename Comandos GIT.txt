  -Inicialização do programa-
Para iniciar o Git BASH usamos o comando: (git init)
 
  -Andamento e alterações do programa-
Para saber sobre o que foi feito até agora usamos o
comando: (git status)
 
  -Adicionando o arquivo ao programa-
Para adicionar um arquivo ao programa usamos o
comando: (git add "nome do arquivo")

Para adicionar vários arquivos, usamos: (git add .)

  -Criando versões do código-
Para criar versões do código utilizamos o 
comando: (git commit -m "nome da versão")

  -Enviando códigos/projeto/arquivos à nuvem-
Para enviar tudo que foi feito até agora no GIT Bash à
nuvem, utilizamos o comando (git push)
 +dica+ passo 1 : antes de tentar levar à nuvem com o
comando(git push), temos que escolher em qual nuvem iremos
enviar as alterações, ou seja, teremos que acessar o 
GITHUB e pegar o link do respositório que iremos enviar
tais alterações.
 passo 2: copiando o link do repositório depois de criado
usarames o comando (git remote add origin -link-)
no meu caso ficou: (git remote add origin https://github.
com/killua99dev/DESAFIO-DIO-GITHUB-primeiro-reposit-rio)
   
   -Decidindo a branch para enviar as alterações-
Após decidirmos o repositório, decidiremos a branch que 
enviaremos, geralmente usamos a branch master, mas nada
impede de criarmos outras, inclusive, mais pra frente
aprenderemos a criar novas branchs, para usarmos a branch
master usamos: (git push --set-upstream origin master)

   -Alterando o código e salvando no GIT/GITHUB-
Após adicionar ou retirar alguma linha de um código, temos
que utilizar o comando aprendido anteriormente (git add .) e
criarmos uma nova versão usando (git commit -m "o que alterou")

   -Verificando o histórico de alterações-
Para verificar o histórico utilizaremos o comando: (git reflog)
com este código o GIT irá listar as alterações feitas, com a 
nomeaçao que demos no (git commit -m "nome da alteração")

   -Voltando a uma versão anterior do código-
Para voltar a uma versão do código localmente, utilizaremos o
comando (git reset --hard "id do código que quer voltar")

Para voltar a versão mais atual usamos o mesmo comando com 
o id do código mais atual (git reset --hard "id do código mais atual")

   -Criando nova branch-
Para criar uma nova branch, utilizamos o comando:
(git branch "nome da branch")

Para saber quantas branchs há no seu programa,
utilizaremos o comando (git branch)

   -Substituindo sua branch-
Para substituir uma branch por outra, iremos rodar
o comando: (git checkout 'nome da branch que quer usar')
obs: utilizar aspas simples

   -Utilizando o processo de merge-
Para unir os códigos de duas branchs iremos fazer o 
processo de merge, para isso deveremos seguir os seguintes passos:
Passo 1: Entrar na branch que irá receber as informações, ou 
códigos e utilizarmos o comando (git checkout "nome da branch")
Passo 2: Pós isso iremos utilizar o comando:
(git merge "nome da branch que está sendo adicionada")